{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\src\\\\pages\\\\Search\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Container, Grid, Avatar, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport profileImage from '../../assets/images/profile-pic-placeholder.png';\nimport { getData } from '../../utilities/API';\nimport PostList from '../PostList/PostListComponent';\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n    margin: 10,\n    width: 200,\n    height: 200\n  }\n}));\n\nfunction Profile(props) {\n  const classes = useStyles();\n\n  const redirectToTarget = path => {\n    props.history.push(path);\n  };\n\n  let username, token;\n\n  if (window.sessionStorage.username) {\n    username = window.sessionStorage.username;\n    token = window.sessionStorage.token;\n  }\n\n  function getQueryStringValue(key) {\n    return decodeURIComponent(window.location.href.replace(new RegExp(\"^(?:.*[&\\\\?]\" + encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\"));\n  }\n\n  let searchQuery = getQueryStringValue(\"query\"); // meaning search intervals will be 10 entries\n\n  let searchIntervals = 10;\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchInformation = _useState2[0],\n        setSearchInformation = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isFetching = _useState4[0],\n        setIsFetching = _useState4[1];\n\n  useEffect(() => {\n    const loadSearchInformation = async () => {\n      let current = getQueryStringValue(\"entryIndex\");\n\n      if (!current) {\n        current = 1;\n      }\n\n      let loadedInfo = await getData('/post/search?tag=' + searchQuery + \"&begIndex=0%limit=\" + searchIntervals, token);\n      let size = loadedInfo.size;\n      let numberOfPages = Math.ceil(size * 1.0 / searchIntervals);\n      loadedInfo.postIdList = [];\n\n      for (var i = 0; i < loadedInfo.data.length; i++) {\n        loadedInfo.postIdList.push(loadedInfo.data[i]._id);\n      }\n\n      setSearchInformation(loadedInfo);\n      setIsFetching(false);\n      console.log(loadedInfo);\n    };\n\n    loadSearchInformation();\n  }, []);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Search results for \\\"\", searchQuery, \"\\\"\"), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(PostList, {\n    postIds: isFetching ? 0 : searchInformation.postIdList,\n    token: token,\n    username: username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))));\n}\n\nexport default withRouter(Profile);","map":{"version":3,"sources":["C:\\Users\\Matt\\Documents\\GitHub\\Tindigo\\client\\src\\pages\\Search\\index.js"],"names":["React","useState","useEffect","withRouter","Container","Grid","Avatar","Button","makeStyles","profileImage","getData","PostList","useStyles","theme","avatar","margin","width","height","Profile","props","classes","redirectToTarget","path","history","push","username","token","window","sessionStorage","getQueryStringValue","key","decodeURIComponent","location","href","replace","RegExp","encodeURIComponent","searchQuery","searchIntervals","searchInformation","setSearchInformation","isFetching","setIsFetching","loadSearchInformation","current","loadedInfo","size","numberOfPages","Math","ceil","postIdList","i","data","length","_id","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { Container, Grid, Avatar,Button } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport profileImage from '../../assets/images/profile-pic-placeholder.png'\r\n\r\nimport { getData } from '../../utilities/API'\r\nimport PostList from '../PostList/PostListComponent'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        margin: 10,\r\n        width: 200,\r\n        height: 200,\r\n    },\r\n  }));\r\n\r\nfunction Profile(props) {\r\n    const classes = useStyles()\r\n    \r\n    const redirectToTarget = (path) => {\r\n        props.history.push(path);\r\n    }\r\n\r\n    let username, token\r\n    if (window.sessionStorage.username) {\r\n        username=window.sessionStorage.username\r\n        token=window.sessionStorage.token\r\n    }\r\n    \r\n    \r\n    function getQueryStringValue (key) {  \r\n        return decodeURIComponent(window.location.href.replace(new RegExp(\"^(?:.*[&\\\\?]\" + encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\"));  \r\n    }  \r\n\r\n    let searchQuery = getQueryStringValue(\"query\")\r\n    // meaning search intervals will be 10 entries\r\n    let searchIntervals = 10\r\n    \r\n\r\n    \r\n    const [searchInformation, setSearchInformation] = useState(0)\r\n    const [isFetching, setIsFetching] = useState(true)\r\n    useEffect(() => {\r\n        \r\n        const loadSearchInformation = async () => {\r\n            let current = getQueryStringValue(\"entryIndex\")\r\n            if (!current){\r\n                current = 1\r\n            }\r\n\r\n            let loadedInfo = await getData('/post/search?tag=' + searchQuery + \"&begIndex=0%limit=\" + searchIntervals, token)\r\n            let size = loadedInfo.size\r\n            let numberOfPages = Math.ceil(size*1.0/searchIntervals)\r\n            \r\n\r\n            loadedInfo.postIdList = []\r\n            for(var i=0;i<loadedInfo.data.length;i++){\r\n                loadedInfo.postIdList.push(loadedInfo.data[i]._id)\r\n            }\r\n\r\n            setSearchInformation(loadedInfo)\r\n            setIsFetching(false)\r\n            console.log(loadedInfo)\r\n        }\r\n        loadSearchInformation()\r\n\r\n    }, [])\r\n   \r\n\r\n    return (\r\n        <Container>\r\n            <h1>Search results for \"{searchQuery}\"</h1>\r\n            \r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    \r\n                    <center>\r\n                        \r\n                        <h1>\r\n                        </h1></center>\r\n                    <PostList postIds={isFetching ? 0 : searchInformation.postIdList} token={token} username={username}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default withRouter(Profile);"]},"metadata":{},"sourceType":"module"}