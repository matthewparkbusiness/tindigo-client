{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\src\\\\pages\\\\PostView\\\\index.js\";\nimport './PostView.css';\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Grid, Button } from '@material-ui/core';\nimport { getData, postData } from '../../utilities/API';\nimport SideBar from './SideBar';\nimport PostInfo from './PostInfo';\nimport PostOptions from './PostOptions';\nimport CommentField from './CommentField';\nimport VoteButton from './VoteButton';\nimport profileImage from '../../assets/images/profile-pic-placeholder.png';\nimport { Chart } from \"react-google-charts\"; // user data\n\nconst users = [{\n  username: 'Steven Colbert',\n  answer: 'League'\n}, {\n  username: 'Dana Carvey',\n  answer: 'Overwatch'\n}, {\n  username: 'Liev Schreiber',\n  answer: 'League'\n}]; // poll tag data\n\nconst tags = ['Gaming', '2019']; // poll option data\n\nconst choices = ['League', 'Overwatch']; // styling for components\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginTop: 30\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  avatar: {\n    margin: 10,\n    width: 200,\n    height: 200\n  },\n  avatarSidebar: {\n    margin: 10\n  },\n  formControl: {\n    margin: theme.spacing(3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst PostView = props => {\n  const classes = useStyles();\n\n  const redirectToTarget = path => {\n    props.history.push(path);\n  };\n\n  let username, token;\n\n  if (window.sessionStorage.username) {\n    username = window.sessionStorage.username;\n    token = window.sessionStorage.token;\n  }\n\n  const _useState = useState('league'),\n        _useState2 = _slicedToArray(_useState, 2),\n        option = _useState2[0],\n        setOption = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        comment = _useState4[0],\n        setComment = _useState4[1];\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    if (name === 'option') setOption(value);\n    if (name === 'comment') setComment(value);\n  };\n\n  const handleVote = event => {\n    console.log(option);\n\n    const processVote = async () => {\n      try {\n        const result = await postData('/post/id/' + getQueryStringValue(\"id\") + \"/vote\", {\n          username: username,\n          choice: option\n        }, token);\n\n        if (result.message === 'success') {\n          console.log(result);\n        } else console.log(result);\n\n        window.location.href = '/post/view?id=' + getQueryStringValue(\"id\");\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    processVote();\n  };\n\n  function getQueryStringValue(key) {\n    return decodeURIComponent(window.location.href.replace(new RegExp(\"^(?:.*[&\\\\?]\" + encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\"));\n  }\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        postInformation = _useState6[0],\n        setPostInformation = _useState6[1];\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isFetching = _useState8[0],\n        setIsFetching = _useState8[1];\n\n  useEffect(() => {\n    const loadPostInformation = async () => {\n      let loadedInfo = null;\n\n      if (username && token) {\n        loadedInfo = await getData('/post/id/' + getQueryStringValue(\"id\") + \"?username=\" + username, token);\n      } else {\n        loadedInfo = await getData('/post/id/' + getQueryStringValue(\"id\"), \"\");\n      }\n\n      if (loadedInfo.data.dateCreated) {\n        let date = new Date(loadedInfo.data.dateCreated);\n        let year = date.getFullYear();\n        let month = date.getMonth() + 1;\n        let dt = date.getDate();\n        loadedInfo.data.dateCreatedFormatted = month + \"/\" + dt + \"/\" + year;\n      }\n\n      if (loadedInfo.data) {\n        loadedInfo.userAlreadyVoted = false;\n\n        for (var i = 0; i < loadedInfo.data.userVotes.length; i++) {\n          if (loadedInfo.data.userVotes[i].username === username) {\n            loadedInfo.userAlreadyVoted = true;\n            loadedInfo.userChoice = loadedInfo.data.userVotes[i].choice;\n          }\n        }\n\n        loadedInfo.revoting = getQueryStringValue(\"view\") === \"revote\";\n        loadedInfo.pieChartData = [[\"Option\", \"Votes\"]];\n\n        for (var i = 0; i < loadedInfo.data.choices.length; i++) {\n          loadedInfo.pieChartData.push([loadedInfo.data.choices[i].choice, loadedInfo.data.choices[i].votes]);\n        }\n      }\n\n      setPostInformation(loadedInfo);\n      setIsFetching(false);\n    };\n\n    loadPostInformation();\n  }, []);\n\n  if (isFetching) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  if (!postInformation.userAllowedToVote) {\n    return React.createElement(Container, {\n      className: classes.root,\n      maxWidth: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(SideBar, {\n      users: users,\n      profileImage: profileImage,\n      classes: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      item: true,\n      xs: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(PostInfo, {\n      classes: classes,\n      profileImage: profileImage,\n      postInfo: postInformation.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"You are not authorized to vote for this post. Please \", React.createElement(\"a\", {\n      href: \"../login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"sign in.\")))));\n  }\n\n  if (postInformation.userAlreadyVoted && !postInformation.revoting) {\n    return React.createElement(Container, {\n      className: classes.root,\n      maxWidth: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(SideBar, {\n      users: postInformation.data.userVotes,\n      profileImage: profileImage,\n      classes: classes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      item: true,\n      xs: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(PostInfo, {\n      classes: classes,\n      profileImage: profileImage,\n      postInfo: postInformation.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Poll Results\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"You voted for \\\"\", postInformation.userChoice, \"\\\".\"), React.createElement(Chart, {\n      width: '100%',\n      height: \"400px\",\n      chartType: \"PieChart\",\n      loader: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Loading Chart\"),\n      data: postInformation.pieChartData,\n      options: {\n        title: '',\n        // Just add this option\n        is3D: true\n      },\n      rootProps: {\n        'data-testid': '2'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(CommentField, {\n      classes: classes,\n      comment: comment,\n      handleChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: classes.button,\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      onClick: () => {\n        window.location.href = '/post/view?id=' + getQueryStringValue(\"id\") + \"&view=revote\";\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Vote Again\"))));\n  }\n\n  return React.createElement(Container, {\n    className: classes.root,\n    maxWidth: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(SideBar, {\n    users: postInformation.data.userVotes,\n    profileImage: profileImage,\n    classes: classes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(PostInfo, {\n    classes: classes,\n    profileImage: profileImage,\n    postInfo: postInformation.data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(\"font\", {\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, postInformation.revoting ? \"NOTE: You have already voted for this post. Voting again will change your previous choice.\" : \"\"))), React.createElement(PostOptions, {\n    classes: classes,\n    option: option,\n    handleChange: handleChange,\n    postInfo: postInformation.data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }), React.createElement(CommentField, {\n    classes: classes,\n    comment: comment,\n    commentsList: postInformation.data.comments,\n    handleChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }), React.createElement(VoteButton, {\n    classes: classes,\n    handleVote: handleVote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }))));\n};\n\nexport default PostView;","map":{"version":3,"sources":["C:\\Users\\Matt\\Documents\\GitHub\\Tindigo\\client\\src\\pages\\PostView\\index.js"],"names":["React","useState","useEffect","makeStyles","Container","Grid","Button","getData","postData","SideBar","PostInfo","PostOptions","CommentField","VoteButton","profileImage","Chart","users","username","answer","tags","choices","useStyles","theme","root","flexGrow","marginTop","button","margin","spacing","avatar","width","height","avatarSidebar","formControl","textField","marginLeft","marginRight","PostView","props","classes","redirectToTarget","path","history","push","token","window","sessionStorage","option","setOption","comment","setComment","handleChange","event","target","name","value","handleVote","console","log","processVote","result","getQueryStringValue","choice","message","location","href","error","key","decodeURIComponent","replace","RegExp","encodeURIComponent","postInformation","setPostInformation","isFetching","setIsFetching","loadPostInformation","loadedInfo","data","dateCreated","date","Date","year","getFullYear","month","getMonth","dt","getDate","dateCreatedFormatted","userAlreadyVoted","i","userVotes","length","userChoice","revoting","pieChartData","votes","userAllowedToVote","title","is3D","comments"],"mappings":"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","sourcesContent":["import './PostView.css'\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Grid, Button } from '@material-ui/core'\r\n\r\nimport { getData, postData } from '../../utilities/API'\r\nimport SideBar from './SideBar'\r\nimport PostInfo from './PostInfo'\r\nimport PostOptions from './PostOptions'\r\nimport CommentField from './CommentField'\r\nimport VoteButton from './VoteButton'\r\n\r\nimport profileImage from '../../assets/images/profile-pic-placeholder.png'\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n// user data\r\nconst users=[\r\n    { username: 'Steven Colbert',\r\n      answer: 'League' },\r\n    { username: 'Dana Carvey',\r\n      answer: 'Overwatch' },\r\n    { username: 'Liev Schreiber',\r\n      answer: 'League' }\r\n]\r\n\r\n// poll tag data\r\nconst tags=[\r\n    'Gaming',\r\n    '2019'\r\n]\r\n\r\n// poll option data\r\nconst choices=[\r\n    'League',\r\n    'Overwatch'\r\n]\r\n\r\n// styling for components\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      marginTop: 30\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    avatar: {\r\n        margin: 10,\r\n        width: 200,\r\n        height: 200,\r\n    },\r\n    avatarSidebar: {\r\n        margin: 10,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(3),\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n\r\n\r\nconst PostView = props => {\r\n    const classes = useStyles()\r\n\r\n    const redirectToTarget = (path) => {\r\n        props.history.push(path);\r\n    }\r\n\r\n    let username, token\r\n    if (window.sessionStorage.username) {\r\n        username=window.sessionStorage.username\r\n        token=window.sessionStorage.token\r\n    }\r\n    \r\n\r\n    const [option, setOption] = useState('league')\r\n    const [comment, setComment]=useState('')\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target\r\n        \r\n        if (name === 'option') setOption(value)\r\n        if (name === 'comment') setComment(value)\r\n    }\r\n\r\n    const handleVote = event => {\r\n        console.log(option)\r\n        const processVote = async () => {\r\n            try {\r\n                const result = await postData('/post/id/' + getQueryStringValue(\"id\") + \"/vote\", {username : username, choice : option}, token)\r\n                if (result.message === 'success') {\r\n                    console.log(result)\r\n                }\r\n                else console.log(result)\r\n                window.location.href = '/post/view?id=' + getQueryStringValue(\"id\")\r\n            }\r\n            catch(error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        processVote()\r\n        \r\n    }\r\n\r\n    function getQueryStringValue (key) {  \r\n        return decodeURIComponent(window.location.href.replace(new RegExp(\"^(?:.*[&\\\\?]\" + encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\", \"i\"), \"$1\"));  \r\n    }  \r\n\r\n    const [postInformation, setPostInformation] = useState(0)\r\n    const [isFetching, setIsFetching] = useState(true)\r\n    useEffect(() => {\r\n        const loadPostInformation = async () => {\r\n            let loadedInfo = null\r\n            if(username && token){\r\n                loadedInfo = await getData('/post/id/' + getQueryStringValue(\"id\") + \"?username=\" + username, token)\r\n            }\r\n            else{\r\n                loadedInfo = await getData('/post/id/' + getQueryStringValue(\"id\"), \"\")\r\n            }\r\n\r\n            if(loadedInfo.data.dateCreated){\r\n                let date = new Date(loadedInfo.data.dateCreated);\r\n                let year = date.getFullYear();\r\n                let month = date.getMonth()+1;\r\n                let dt = date.getDate();\r\n\r\n                loadedInfo.data.dateCreatedFormatted = month + \"/\" + dt + \"/\" + year;\r\n            }\r\n            if(loadedInfo.data){\r\n                loadedInfo.userAlreadyVoted= false\r\n                for(var i=0; i<loadedInfo.data.userVotes.length; i++){\r\n                    if(loadedInfo.data.userVotes[i].username === username) {\r\n                        loadedInfo.userAlreadyVoted = true\r\n                        loadedInfo.userChoice = loadedInfo.data.userVotes[i].choice\r\n                    }\r\n                }\r\n                loadedInfo.revoting = getQueryStringValue(\"view\") === \"revote\"\r\n                loadedInfo.pieChartData = [[\"Option\", \"Votes\"]]\r\n                for(var i=0; i<loadedInfo.data.choices.length; i++){\r\n                    loadedInfo.pieChartData.push([loadedInfo.data.choices[i].choice, loadedInfo.data.choices[i].votes])\r\n                }\r\n\r\n            }\r\n            \r\n            \r\n\r\n            setPostInformation(loadedInfo)\r\n            setIsFetching(false)\r\n        }\r\n        loadPostInformation()\r\n    }, [])\r\n    \r\n\r\n    if(isFetching){\r\n        return (<div>Loading...</div>)\r\n    }\r\n    if(!postInformation.userAllowedToVote){\r\n        return (\r\n            <Container className={classes.root} maxWidth='lg'>\r\n                <Grid container spacing={2}>\r\n                    <SideBar\r\n                    users={users}\r\n                    profileImage={profileImage}\r\n                    classes={classes} />\r\n    \r\n                    <Grid item xs={9}>\r\n                        <PostInfo\r\n                        classes={classes}\r\n                        profileImage={profileImage}\r\n                        postInfo={postInformation.data} />\r\n    \r\n\r\n                        <p>You are not authorized to vote for this post. Please <a href=\"../login\">sign in.</a></p>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        )\r\n    }\r\n    if(postInformation.userAlreadyVoted && !postInformation.revoting){\r\n        return (\r\n            <Container className={classes.root} maxWidth='lg'>\r\n                <Grid container spacing={2}>\r\n                    <SideBar\r\n                    users={postInformation.data.userVotes}\r\n                    profileImage={profileImage}\r\n                    classes={classes} />\r\n\r\n                    <Grid item xs={9}>\r\n                        <PostInfo\r\n                        classes={classes}\r\n                        profileImage={profileImage}\r\n                        postInfo={postInformation.data} />\r\n\r\n                        <h1>Poll Results</h1>\r\n                        <p>You voted for \"{postInformation.userChoice}\".</p>\r\n                        <Chart\r\n                            width={'100%'}\r\n                            height={\"400px\"}\r\n                            chartType=\"PieChart\"\r\n                            loader={<div>Loading Chart</div>}\r\n                            data={postInformation.pieChartData}\r\n                            options={{\r\n                                title: '',\r\n                                // Just add this option\r\n                                is3D: true,\r\n                            }}\r\n                            rootProps={{ 'data-testid': '2' }}\r\n                        />\r\n\r\n                        <CommentField\r\n                        classes={classes}\r\n                        comment={comment}\r\n                        handleChange={handleChange} />\r\n\r\n                        <Button\r\n                                    className={classes.button}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n\r\n                                        \r\n                                        window.location.href = '/post/view?id=' + getQueryStringValue(\"id\") + \"&view=revote\"\r\n\r\n                                    }}>\r\n                                        Vote Again\r\n                                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        )\r\n    }\r\n    return (\r\n        <Container className={classes.root} maxWidth='lg'>\r\n            <Grid container spacing={2}>\r\n                <SideBar\r\n                users={postInformation.data.userVotes}\r\n                profileImage={profileImage}\r\n                classes={classes} />\r\n\r\n                <Grid item xs={9}>\r\n                    <PostInfo\r\n                    classes={classes}\r\n                    profileImage={profileImage}\r\n                    postInfo={postInformation.data} />\r\n\r\n                    <p><b><font color=\"red\">{postInformation.revoting?\"NOTE: You have already voted for this post. Voting again will change your previous choice.\":\"\"}</font></b></p>\r\n\r\n                    <PostOptions\r\n                    classes={classes}\r\n                    option={option}\r\n                    handleChange={handleChange}\r\n                    postInfo={postInformation.data} />\r\n\r\n                    <CommentField\r\n                    classes={classes}\r\n                    comment={comment}\r\n                    commentsList={postInformation.data.comments}\r\n                    handleChange={handleChange} />\r\n\r\n                    <VoteButton\r\n                    classes={classes}\r\n                    handleVote={handleVote} />\r\n                </Grid>\r\n            </Grid>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PostView"]},"metadata":{},"sourceType":"module"}