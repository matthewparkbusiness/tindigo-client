{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\src\\\\pages\\\\Login\\\\index.js\";\nimport React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { setUser } from '../../redux/actions/user';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Grid, TextField, Button } from '@material-ui/core';\nimport { postData } from '../../utilities/API';\nimport LoginField from './LoginField';\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 300\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction Login(props) {\n  const dispatch = useDispatch();\n\n  const redirectToTarget = path => {\n    props.history.push(path);\n  };\n\n  if (window.sessionStorage.username) {\n    const username = window.sessionStorage.username;\n    const token = window.sessionStorage.token;\n    dispatch(setUser(username, token));\n    redirectToTarget('/');\n  }\n\n  const classes = useStyles();\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useState5 = useState({\n    username: false,\n    password: false\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        touched = _useState6[0],\n        setTouched = _useState6[1];\n\n  const handleBlur = event => {\n    const name = event.target.name;\n    setTouched(_objectSpread({}, touched, {\n      [name]: true\n    }));\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n    switch (name) {\n      case 'username':\n        setUsername(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n    }\n  };\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isIncorrect = _useState8[0],\n        setIncorrect = _useState8[1];\n\n  const handleLogin = async () => {\n    const data = {\n      username,\n      password\n    };\n\n    try {\n      const result = await postData('/account/signin', data);\n\n      if (result.message === 'success') {\n        dispatch(setUser(username, result.token));\n        window.sessionStorage.username = username;\n        window.sessionStorage.token = result.token;\n        redirectToTarget('/');\n      } else {\n        console.log(result);\n        setIncorrect(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const validate = () => {\n    return {\n      username: username.length <= 0,\n      password: password.length <= 0\n    };\n  };\n\n  const errors = validate();\n\n  const shouldMarkError = field => {\n    const hasError = errors[field];\n    const shouldShow = touched[field];\n    return hasError ? shouldShow : false;\n  };\n\n  const isDisabled = Object.keys(errors).filter(key => key !== 'about').some(key => errors[key]);\n  return React.createElement(Container, {\n    style: {\n      marginTop: '75px',\n      marginLeft: '20%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Login to Tindigo!\")), isIncorrect ? React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Incorrect username or password\") : \"\", React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"user-name\",\n    label: \"User Name\",\n    name: \"username\",\n    value: username,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    className: classes.textField,\n    helperText: shouldMarkError('username') ? 'please provide a user name' : '',\n    onKeyPress: ev => {\n      if (ev.key === 'Enter') {\n        handleLogin();\n      }\n    },\n    margin: \"normal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"standard-password-input\",\n    label: \"Password\",\n    type: \"password\",\n    autoComplete: \"current-password\",\n    name: \"password\",\n    value: password,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    className: classes.textField,\n    helperText: shouldMarkError('username') ? 'please provide a user name' : '',\n    onKeyPress: ev => {\n      if (ev.key === 'Enter') {\n        handleLogin();\n      }\n    },\n    margin: \"normal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    size: \"large\",\n    disabled: isDisabled,\n    onClick: handleLogin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Login\")));\n}\n\nexport default withRouter(Login);","map":{"version":3,"sources":["C:\\Users\\Matt\\Documents\\GitHub\\Tindigo\\client\\src\\pages\\Login\\index.js"],"names":["React","useState","withRouter","useDispatch","setUser","makeStyles","Container","Grid","TextField","Button","postData","LoginField","useStyles","theme","textField","marginLeft","spacing","marginRight","width","button","margin","Login","props","dispatch","redirectToTarget","path","history","push","window","sessionStorage","username","token","classes","setUsername","password","setPassword","touched","setTouched","handleBlur","event","name","target","handleChange","value","isIncorrect","setIncorrect","handleLogin","data","result","message","console","log","error","validate","length","errors","shouldMarkError","field","hasError","shouldShow","isDisabled","Object","keys","filter","key","some","marginTop","color","ev"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setUser } from '../../redux/actions/user'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Grid, TextField, Button } from '@material-ui/core'\r\nimport { postData } from '../../utilities/API'\r\n\r\nimport LoginField from './LoginField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nfunction Login(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const redirectToTarget = (path) => {\r\n        props.history.push(path);\r\n    }\r\n\r\n    if (window.sessionStorage.username) {\r\n        const username = window.sessionStorage.username\r\n        const token = window.sessionStorage.token\r\n        dispatch(setUser(username, token))\r\n        redirectToTarget('/')\r\n    }\r\n\r\n    const classes=useStyles()\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [touched, setTouched] = useState({\r\n        username: false,\r\n        password: false,\r\n    })\r\n\r\n    const handleBlur = event => {\r\n        const { name } = event.target\r\n        setTouched({...touched, [name]: true})\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        switch(name) {\r\n            case 'username':\r\n                setUsername(value)\r\n                break\r\n            case 'password':\r\n                setPassword(value)\r\n                break\r\n            default:\r\n        }\r\n    }\r\n\r\n    const [isIncorrect, setIncorrect] = useState(false)\r\n\r\n    const handleLogin = async () => {\r\n        const data={ username, password }\r\n        try {\r\n            const result = await postData('/account/signin', data)\r\n            if (result.message === 'success') {\r\n                dispatch(setUser(username, result.token))\r\n                window.sessionStorage.username=username\r\n                window.sessionStorage.token=result.token\r\n                redirectToTarget('/')\r\n            }\r\n            else {console.log(result)\r\n                setIncorrect(true)\r\n            \r\n            }\r\n\r\n        }\r\n        catch(error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const validate = () => {\r\n        return {\r\n            username: username.length <= 0,\r\n            password: password.length <= 0\r\n        }\r\n    }\r\n\r\n    const errors = validate()\r\n\r\n    const shouldMarkError = field => {\r\n        const hasError = errors[field];\r\n        const shouldShow = touched[field];\r\n        return hasError ? shouldShow : false;\r\n    }\r\n\r\n    const isDisabled = Object.keys(errors)\r\n                             .filter(key => key !== 'about')\r\n                             .some(key => errors[key])\r\n\r\n    return (\r\n        <Container style={{ marginTop: '75px', marginLeft: '20%' }}>\r\n            <Grid container>\r\n                <h1>Login to Tindigo!</h1>\r\n            </Grid>\r\n            {isIncorrect ? <p style={{color : \"red\"}}>Incorrect username or password</p> : \"\"}\r\n    <Grid container>\r\n        <TextField\r\n            id='user-name'\r\n            label='User Name'\r\n            name='username'\r\n            value={username}\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            className={classes.textField}\r\n            helperText={shouldMarkError('username') ? 'please provide a user name' : ''}\r\n            onKeyPress={(ev) => {\r\n                if (ev.key === 'Enter') {\r\n                    handleLogin()\r\n                }\r\n              }}\r\n            margin='normal' />\r\n    </Grid>\r\n    <Grid container>\r\n        <TextField\r\n            id=\"standard-password-input\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            autoComplete=\"current-password\"   \r\n            name='password'\r\n            value={password}\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            className={classes.textField}\r\n            helperText={shouldMarkError('username') ? 'please provide a user name' : ''}\r\n            onKeyPress={(ev) => {\r\n                if (ev.key === 'Enter') {\r\n                    handleLogin()\r\n                }\r\n              }}\r\n            margin='normal' />\r\n    </Grid>\r\n        \r\n\r\n            <Grid container>\r\n                <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                size='large'\r\n                disabled={isDisabled}\r\n                onClick={handleLogin} >\r\n                    Login\r\n                </Button>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withRouter(Login)"]},"metadata":{},"sourceType":"module"}