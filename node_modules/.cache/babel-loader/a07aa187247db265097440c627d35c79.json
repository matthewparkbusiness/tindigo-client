{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\src\\\\pages\\\\PostList\\\\PostListComponent.js\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { getData } from '../../utilities/API';\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nfunction PostList(props) {\n  /*\r\n  const [accountInformation, setAccountInformation] = useState(0)\r\n  const [isFetching, setIsFetching] = useState(true)\r\n  useEffect(() => {\r\n      \r\n      const loadAccountInformation = async () => {\r\n          let loadedInfo = await getData('/post/id/' + username, token)\r\n          setAccountInformation(loadedInfo)\r\n          setIsFetching(false)\r\n          console.log(loadedInfo)\r\n      }\r\n      loadAccountInformation()\r\n    }, [])*/\n  if (props.postIds == 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n  if (typeof props.postIds === 'string' || props.postIds instanceof String) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(PostLink, {\n      postId: props.postIds,\n      token: props.token,\n      username: props.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    class: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, props.postIds.map(postId => {\n    return React.createElement(PostLink, {\n      postId: postId,\n      token: props.token,\n      username: props.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  }));\n}\n\nvar cardStyle = {\n  display: 'block',\n  width: '100vw'\n};\n\nfunction PostLink(props) {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        postInformation = _useState2[0],\n        setPostInformation = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isFetching = _useState4[0],\n        setIsFetching = _useState4[1];\n\n  useEffect(() => {\n    const loadPostInformation = async () => {\n      let loadedInfo = await getData('/post/id/' + props.postId + \"?username=\" + props.username, props.token);\n\n      if (loadedInfo.data) {\n        let date = new Date(loadedInfo.data.dateCreated);\n        let year = date.getFullYear();\n        let month = date.getMonth() + 1;\n        let dt = date.getDate();\n        loadedInfo.isPrivate = false;\n        loadedInfo.data.dateCreatedFormatted = month + \"/\" + dt + \"/\" + year;\n      } else {\n        loadedInfo.isPrivate = true;\n      }\n\n      setPostInformation(loadedInfo);\n      setIsFetching(false);\n    };\n\n    loadPostInformation();\n  }, []);\n  const classes = useStyles();\n\n  if (isFetching) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"  \");\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: classes.card,\n    style: cardStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, postInformation.isPrivate ? React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Private Post\"), \" \") : React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, postInformation.data.dateCreatedFormatted), React.createElement(\"div\", {\n    id: \"tags\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, postInformation.data.tags.map(el => {\n    return React.createElement(Button, {\n      key: el,\n      value: \"tag\",\n      className: classes.button,\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, el);\n  })), React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, postInformation.data.question), React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"@\" + postInformation.data.username), React.createElement(Typography, {\n    className: classes.pos,\n    color: \"textSecondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, postInformation.data.description)), postInformation.isPrivate ? '' : React.createElement(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Button, {\n    size: \"small\",\n    href: \"../post/view\" + \"?id=\" + props.postId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"View\")))));\n}\n\nexport default PostList;","map":{"version":3,"sources":["C:\\Users\\Matt\\Documents\\GitHub\\Tindigo\\client\\src\\pages\\PostList\\PostListComponent.js"],"names":["React","useState","useEffect","makeStyles","withStyles","Container","Grid","GridList","GridListTile","Card","CardActions","CardContent","Button","Typography","getData","useStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","PostList","props","postIds","String","token","username","map","postId","cardStyle","width","PostLink","postInformation","setPostInformation","isFetching","setIsFetching","loadPostInformation","loadedInfo","data","date","Date","dateCreated","year","getFullYear","month","getMonth","dt","getDate","isPrivate","dateCreatedFormatted","classes","tags","el","button","question","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { getData } from '../../utilities/API'\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n      minWidth: 275,\r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  });\r\n  \r\n\r\nfunction PostList(props) {\r\n    /*\r\n    const [accountInformation, setAccountInformation] = useState(0)\r\n    const [isFetching, setIsFetching] = useState(true)\r\n    useEffect(() => {\r\n        \r\n        const loadAccountInformation = async () => {\r\n            let loadedInfo = await getData('/post/id/' + username, token)\r\n            setAccountInformation(loadedInfo)\r\n            setIsFetching(false)\r\n            console.log(loadedInfo)\r\n        }\r\n        loadAccountInformation()\r\n\r\n    }, [])*/\r\n    if(props.postIds == 0){\r\n        return (<div></div>)\r\n    }\r\n    if (typeof props.postIds  === 'string' || props.postIds  instanceof String){\r\n        return (\r\n            <div>\r\n                 { <PostLink postId={props.postIds} token={props.token} username={props.username}/>}\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n       <div class='row'>\r\n        {props.postIds.map(postId => {\r\n            return (\r\n            <PostLink postId={postId} token={props.token} username={props.username}/>\r\n            )\r\n        })}\r\n        </div>\r\n    );\r\n}\r\n\r\nvar cardStyle = {\r\n    display: 'block',\r\n    width: '100vw'\r\n}\r\n\r\nfunction PostLink(props) {\r\n\r\n    const [postInformation, setPostInformation] = useState(0)\r\n    const [isFetching, setIsFetching] = useState(true)\r\n    useEffect(() => {\r\n        const loadPostInformation = async () => {\r\n            let loadedInfo = await getData('/post/id/' + props.postId + \"?username=\" + props.username, props.token)\r\n            \r\n            if(loadedInfo.data){\r\n\r\n                let date = new Date(loadedInfo.data.dateCreated);\r\n                let year = date.getFullYear();\r\n                let month = date.getMonth()+1;\r\n                let dt = date.getDate();\r\n                loadedInfo.isPrivate = false\r\n\r\n                loadedInfo.data.dateCreatedFormatted = month + \"/\" + dt + \"/\" + year;\r\n            }\r\n            else{\r\n                loadedInfo.isPrivate = true\r\n            }\r\n\r\n            setPostInformation(loadedInfo)\r\n            setIsFetching(false)\r\n            \r\n        }\r\n        loadPostInformation()\r\n    }, [])\r\n    \r\n    \r\n\r\n    \r\n    const classes = useStyles();\r\n    if(isFetching){\r\n        return (<div>  </div>)\r\n    }\r\n    return (\r\n        <Container>\r\n            <Grid container>\r\n                <Card className={classes.card} style={cardStyle}>\r\n                    {postInformation.isPrivate ?\r\n                    <CardContent>\r\n                        \r\n\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                            Private Post\r\n                        </Typography> </CardContent>:\r\n\r\n                        <CardContent>\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                            {postInformation.data.dateCreatedFormatted}\r\n                        </Typography>\r\n                        <div id='tags'>\r\n                            {postInformation.data.tags.map(el => {\r\n                                return (\r\n                                    <Button\r\n                                    key={el}\r\n                                    value='tag'\r\n                                    className={classes.button}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size=\"small\" >\r\n                                        {el}\r\n                                    </Button>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            {postInformation.data.question}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            {\"@\" + postInformation.data.username}\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.pos} color=\"textSecondary\">\r\n                            {postInformation.data.description}\r\n                        </Typography>\r\n                        \r\n                    </CardContent>}\r\n\r\n                    {postInformation.isPrivate ? '':\r\n                    <CardActions>\r\n                        <Button size=\"small\" href={\"../post/view\" + \"?id=\" + props.postId}>View</Button>\r\n                        </CardActions> }\r\n                </Card>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nexport default PostList"]},"metadata":{},"sourceType":"module"}