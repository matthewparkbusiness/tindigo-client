{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Documents\\\\GitHub\\\\Tindigo\\\\client\\\\src\\\\pages\\\\PostCreate\\\\index.js\";\nimport './PostCreate.css';\nimport React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container } from '@material-ui/core';\nimport VisibilityField from './Fields/Visibility';\nimport TagsField from './Fields/Tags';\nimport QuestionField from './Fields/Question';\nimport DescriptionField from './Fields/Description';\nimport VotingOptionsField from './Fields/VotingOptions';\nimport ButtonCreatePost from './ButtonCreatePost';\nimport { postData } from '../../utilities/API';\nconst visibilityOptions = [{\n  value: 'everyone',\n  label: 'Public'\n}, {\n  value: 'group',\n  label: 'Group only'\n}];\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 300\n  },\n  menu: {\n    width: 200\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst PostCreate = props => {\n  const redirectToTarget = path => {\n    props.history.push(path);\n  };\n\n  let username, token;\n\n  if (window.sessionStorage.username) {\n    username = window.sessionStorage.username;\n    token = window.sessionStorage.token;\n  } else {\n    redirectToTarget('/');\n  }\n\n  const classes = useStyles();\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        visibility = _React$useState2[0],\n        setVisibility = _React$useState2[1];\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        tags = _useState2[0],\n        setTags = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        question = _useState4[0],\n        setQuestion = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        description = _useState6[0],\n        setDescription = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        options = _useState8[0],\n        setOptions = _useState8[1];\n\n  const _useState9 = useState({\n    visibility: false,\n    tags: false,\n    question: false,\n    description: false,\n    options: false\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        touched = _useState10[0],\n        setTouched = _useState10[1];\n\n  const messages = {\n    visibility: \"Please select a visibility option\",\n    tags: 'Please provide at least one tag',\n    question: 'Please provide a question for your poll',\n    description: 'A description is not required, but it may help',\n    options: 'Please provide at least two voting options'\n  };\n\n  const handleAdd = event => {\n    const ref = event.target.textContent.split(' ')[1];\n    const input = document.getElementById(\"\".concat(ref, \"-input\"));\n    const value = input.value;\n    if (ref === 'tag') setTags([...tags, value]);\n    if (ref === 'option') setOptions([...options, value]);\n    input.value = '';\n  };\n\n  const handleAddTagForTextField = event => {\n    const value = event.target.value;\n    setTags([...tags, value]);\n    event.target.value = '';\n  };\n\n  const handleAddOptionForTextField = event => {\n    const value = event.target.value;\n    setOptions([...options, value]);\n    event.target.value = '';\n  };\n\n  const handleBlur = field => event => {\n    setTouched(_objectSpread({}, touched, {\n      [field]: true\n    }));\n  };\n\n  const handleRemove = event => {\n    let target = event.target;\n    let ref = target.textContent.substring(5);\n    let _target = target,\n        value = _target.value;\n\n    if (!value) {\n      target = target.parentElement;\n      value = target.value;\n\n      if (!value) {\n        target = target.parentElement.parentElement;\n        ref = target.textContent.substring(5);\n        value = target.value;\n      }\n    }\n\n    if (value === 'tag') {\n      const index = tags.indexOf(ref);\n      tags.splice(index, 1);\n      setTags([...tags]);\n    } else if (value === 'option') {\n      const index = options.indexOf(ref);\n      options.splice(index, 1);\n      setOptions([...options]);\n    }\n  };\n\n  const handlePost = async () => {\n    try {\n      const post = {\n        username,\n        visibility,\n        tags,\n        question,\n        description,\n        choices: options\n      };\n      console.log(post);\n      const result = await postData('/post/id', post, token);\n      console.log(result);\n\n      if (result.message === \"success\") {\n        redirectToTarget(\"/post/view?id=\" + result.data._id);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const validate = () => {\n    return {\n      visibility: visibility.length <= 0,\n      tags: tags.length <= 0,\n      description: description.length <= 0,\n      question: question.length <= 0,\n      options: options.length <= 1\n    };\n  };\n\n  const errors = validate();\n\n  const shouldMarkError = field => {\n    const hasError = errors[field];\n    const shouldShow = touched[field];\n    return hasError ? shouldShow : false;\n  };\n\n  return React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"Create a Poll\"), React.createElement(\"form\", {\n    className: classes.container,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(VisibilityField, {\n    classes: classes,\n    visibility: visibility,\n    setVisibility: setVisibility,\n    visibilityOptions: visibilityOptions,\n    handleBlur: handleBlur,\n    shouldMarkError: shouldMarkError,\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(TagsField, {\n    classes: classes,\n    tags: tags,\n    handleAdd: handleAdd,\n    handleBlur: handleBlur,\n    handleRemove: handleRemove,\n    shouldMarkError: shouldMarkError,\n    handleAddTagForTextField: handleAddTagForTextField,\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), React.createElement(QuestionField, {\n    classes: classes,\n    question: question,\n    setQuestion: setQuestion,\n    handleBlur: handleBlur,\n    shouldMarkError: shouldMarkError,\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(DescriptionField, {\n    classes: classes,\n    description: description,\n    setDescription: setDescription,\n    handleBlur: handleBlur,\n    shouldMarkError: shouldMarkError,\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }), React.createElement(VotingOptionsField, {\n    classes: classes,\n    options: options,\n    setOptions: setOptions,\n    handleAdd: handleAdd,\n    handleBlur: handleBlur,\n    handleRemove: handleRemove,\n    shouldMarkError: shouldMarkError,\n    handleAddOptionForTextField: handleAddOptionForTextField,\n    messages: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), React.createElement(ButtonCreatePost, {\n    classes: classes,\n    handlePost: handlePost,\n    errors: errors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  })));\n};\n\nexport default withRouter(PostCreate);","map":{"version":3,"sources":["C:\\Users\\Matt\\Documents\\GitHub\\Tindigo\\client\\src\\pages\\PostCreate\\index.js"],"names":["React","useState","withRouter","makeStyles","Container","VisibilityField","TagsField","QuestionField","DescriptionField","VotingOptionsField","ButtonCreatePost","postData","visibilityOptions","value","label","useStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","menu","button","margin","PostCreate","props","redirectToTarget","path","history","push","username","token","window","sessionStorage","classes","visibility","setVisibility","tags","setTags","question","setQuestion","description","setDescription","options","setOptions","touched","setTouched","messages","handleAdd","event","ref","target","textContent","split","input","document","getElementById","handleAddTagForTextField","handleAddOptionForTextField","handleBlur","field","handleRemove","substring","parentElement","index","indexOf","splice","handlePost","post","choices","console","log","result","message","data","_id","error","validate","length","errors","shouldMarkError","hasError","shouldShow"],"mappings":"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","sourcesContent":["import './PostCreate.css'\r\nimport React, { useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core'\r\n\r\nimport VisibilityField from './Fields/Visibility';\r\nimport TagsField from './Fields/Tags'\r\nimport QuestionField from './Fields/Question';\r\nimport DescriptionField from './Fields/Description';\r\nimport VotingOptionsField from './Fields/VotingOptions';\r\nimport ButtonCreatePost from './ButtonCreatePost';\r\n\r\nimport { postData } from '../../utilities/API'\r\n\r\nconst visibilityOptions = [\r\n    {\r\n      value: 'everyone',\r\n      label: 'Public',\r\n    },\r\n    {\r\n      value: 'group',\r\n      label: 'Group only',\r\n    }\r\n  ];\r\n  \r\n  const useStyles = makeStyles(theme => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 300,\r\n    },\r\n    menu: {\r\n      width: 200,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst PostCreate = props => {\r\n    const redirectToTarget = (path) => {\r\n        props.history.push(path);\r\n    }\r\n\r\n    let username, token\r\n    if (window.sessionStorage.username) {\r\n        username=window.sessionStorage.username\r\n        token=window.sessionStorage.token\r\n    }\r\n    else {\r\n        redirectToTarget('/')\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const [visibility, setVisibility] = React.useState('');\r\n    const [tags, setTags] = useState([])\r\n    const [question, setQuestion] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [options, setOptions] = useState([])\r\n\r\n    const [touched, setTouched] = useState({\r\n        visibility: false,\r\n        tags: false,\r\n        question: false,\r\n        description: false,\r\n        options: false\r\n    })\r\n\r\n    const messages = {\r\n        visibility: \"Please select a visibility option\",\r\n        tags: 'Please provide at least one tag',\r\n        question: 'Please provide a question for your poll',\r\n        description: 'A description is not required, but it may help',\r\n        options: 'Please provide at least two voting options'\r\n    }\r\n\r\n    const handleAdd = event => {\r\n        const ref=event.target.textContent.split(' ')[1]\r\n        const input=document.getElementById(`${ref}-input`)\r\n        const { value }=input\r\n        if (ref === 'tag') setTags([...tags, value])\r\n        if (ref === 'option') setOptions([...options, value])\r\n        input.value=''\r\n    }\r\n\r\n    const handleAddTagForTextField = event => {\r\n        const value =event.target.value\r\n        setTags([...tags, value])\r\n        event.target.value=''\r\n    }\r\n\r\n    const handleAddOptionForTextField = event => {\r\n        const value =event.target.value\r\n        setOptions([...options, value])\r\n        event.target.value=''\r\n    }\r\n\r\n    const handleBlur = field => event => {\r\n        setTouched({...touched, [field]: true})\r\n    }\r\n\r\n    const handleRemove = event => {\r\n        let target=event.target\r\n        let ref=target.textContent.substring(5)\r\n        let { value } = target\r\n\r\n        if (! value) {\r\n            target = target.parentElement\r\n            value = target.value\r\n\r\n            if (! value) {\r\n                target = target.parentElement.parentElement\r\n                ref=target.textContent.substring(5)\r\n                value = target.value\r\n            }\r\n        }\r\n        \r\n        if (value === 'tag') {\r\n            const index=tags.indexOf(ref)\r\n            tags.splice(index, 1)\r\n            setTags([...tags])\r\n        } else if (value === 'option') {\r\n            const index=options.indexOf(ref)\r\n            options.splice(index, 1)\r\n            setOptions([...options])\r\n        }\r\n    }\r\n\r\n    const handlePost = async () => {\r\n        try {\r\n            const post = {\r\n                username,\r\n                visibility,\r\n                tags,\r\n                question,\r\n                description,\r\n                choices: options\r\n            }\r\n            console.log(post)\r\n            const result = await postData('/post/id', post, token)\r\n            console.log(result)\r\n            if(result.message === \"success\"){\r\n                redirectToTarget(\"/post/view?id=\" + result.data._id)\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const validate = () => {\r\n        return {\r\n            visibility: visibility.length <= 0,\r\n            tags: tags.length <= 0,\r\n            description: description.length <= 0,\r\n            question: question.length <= 0,\r\n            options: options.length <= 1\r\n        }\r\n    }\r\n\r\n    const errors = validate()\r\n\r\n    const shouldMarkError = field => {\r\n        const hasError = errors[field];\r\n        const shouldShow = touched[field];\r\n        return hasError ? shouldShow : false;\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <h1>Create a Poll</h1>\r\n            <form className={classes.container} noValidate autoComplete='off'>\r\n                \r\n                <VisibilityField\r\n                classes={classes}\r\n                visibility={visibility}\r\n                setVisibility={setVisibility}\r\n                visibilityOptions={visibilityOptions}\r\n                handleBlur={handleBlur}\r\n                shouldMarkError={shouldMarkError}\r\n                messages={messages} />\r\n\r\n                <TagsField\r\n                classes={classes}\r\n                tags={tags}\r\n                handleAdd={handleAdd}\r\n                handleBlur={handleBlur}\r\n                handleRemove={handleRemove}\r\n                shouldMarkError={shouldMarkError}\r\n                handleAddTagForTextField={handleAddTagForTextField}\r\n                messages={messages} />\r\n\r\n                <QuestionField\r\n                classes={classes}\r\n                question={question}\r\n                setQuestion={setQuestion}\r\n                handleBlur={handleBlur}\r\n                shouldMarkError={shouldMarkError}\r\n                messages={messages} />\r\n\r\n                <DescriptionField\r\n                classes={classes}\r\n                description={description}\r\n                setDescription={setDescription}\r\n                handleBlur={handleBlur}\r\n                shouldMarkError={shouldMarkError}\r\n                messages={messages} />\r\n\r\n                <VotingOptionsField\r\n                classes={classes}\r\n                options={options}\r\n                setOptions={setOptions}\r\n                handleAdd={handleAdd}\r\n                handleBlur={handleBlur}\r\n                handleRemove={handleRemove}\r\n                shouldMarkError={shouldMarkError}\r\n                handleAddOptionForTextField = {handleAddOptionForTextField}\r\n                messages={messages} />\r\n                \r\n                <ButtonCreatePost\r\n                classes={classes}\r\n                handlePost={handlePost}\r\n                errors={errors} />\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withRouter(PostCreate)"]},"metadata":{},"sourceType":"module"}